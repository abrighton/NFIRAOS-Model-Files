subsystem = NFIRAOS
component = ngsAdc

description = NGS ADC Assembly commands.

receive = [
  
   {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> config.posTolerance
<li> config.transDisp_To_PowOrientFilename
<li> config.transPowOrient_To_motorFilename
<li> config.invTransFilename
<li> config.imageShiftLookupFilename
<li> config.pupilShiftLookupFilename
<li> config.defaultOrientation
<li> config.defaultPower
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the NGS ADC stages and prepares the assembly for operation. 
If either stage is currently moving then this command will internally trigger a stop if required. This command will then position the ADC to a position based on a default power and orientation specified in the configuration file. 
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> current.datumA = false
<li> current.datumB = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> current.datumA = true
<li> current.datumB = true
<li> current.rotationA {set based on current location}
<li> current.rotationB {set based on current location}
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following command and stop all NGS ADC stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> current.rotationA {set based on current location}
<li> current.rotationB {set based on current location}
</ul>"""
  }

  {
    name            = move
    description     = """Calibration command to move individual NGS ADC stages to the specified positions. (calibration)
  
At least one input parameter must be specified, an unspecified stage will remain unchanged.

The specified ADC stage(s) must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> target.rotationA = {as given}
<li> target.rotationB = {as given}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> current.rotationA {set based on current location}
<li> current.rotationB {set based on current location}
<li> current.power = {set to current value}
<li> current.orientation = {set to current value}
</ul>"""
    args = [
      {
        name        = rotationA
        description = target NGS ADC rotation A stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
      {
        name        = rotationB
        description = target NGS ADC rotation B stage position.
        type        = double
        units       = degrees of mechanical rotation in local stage coordinate system
      }
    ]
  }

  {
    name            = setAdc
    description     = """Position the NGS ADC based on specified power and orientation. (calibration)
 
The ADC stages must be datumed otherwise this command will be rejected.  This command is used  for calibration.  It allows the user to set the ADC prisms based on a power and orientation.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> target.power = {as given}
<li> target.orientation = {as given}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> current.power = {set to current value}
<li> current.orientation = {set to current value}
<li> current.rotationA {set based on current location}
<li> current.rotationB {set based on current location}
</ul>"""
    args = [
      {
        name        = power
        description = "target ADC power (differential prism rotation, TBD)"
        type        = double
        units       = degrees
      }
      {
        name        = orientation
        description = target ADC orientation (mean prism rotation)
        type        = double
        units       = degrees
      }
    ]
    requiredArgs = [ power, orientation ]
  }

  {
    name            = setAdcDispersion
    description     = """Position the NGS ADC based on specified atmospheric dispersion parameters. (calibration)

This is a discrete command that behaves like the setAdc command, but the power and orientation settings are inferred from dispersion information that mimics information provided by the TCS when following.

The ADC stages must be datumed otherwise this command will be rejected.  This command is used  for calibration.  It allows the user to set the ADC prisms based on supplied dispersion parameters.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> target.power = {as inferred from dispersion parameters}
<li> target.orientation = {as inferred from dispersion parameters}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> current.power = {set to current value}
<li> current.orientation = {set to current value}
<li> current.rotationA {set based on current location}
<li> current.rotationB {set based on current location}
</ul>"""
    args = [
      {
        name        = referenceWavelength
        description = "The wavelength at which the computed dispersion is zero, and also the wavelength at which image and pupil shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation
        description = """Orientation of the axis of dispersion to atmospheric refraction defined in the XY plane of the FCRS<sub>174.5</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength
        description = "An array of wavelengths. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight
        description = "An array of weights with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion
        description = "An array of atmospheric dispersion values"
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }
    ]
  }

  {
    name            = dispersionOverride
    description     = """Sets the dispersion parameter override variables. (engineering)

This command does not stop the follow mode. The command sets the local variable used to override the dispersion stream from the TCS. See follow command for more details 

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> none
</ul>"""
    args = [
      {
        name        = referenceWavelength
        description = "The wavelength at which the computed dispersion is zero, and also the wavelength at which image and pupil shifts are to be reported."
        type        = double
        units       = microns
      }
      {
        name        = orientation
        description = """Orientation of the axis of dispersion to atmospheric refraction defined in the XY plane of the FCRS<sub>174.5</sub>"""
        type        = double
        minimum     = -180
        maximum     = 180
        units       = degrees
      }
      {
        name        = wavelength
        description = "An array of wavelengths. Each provided wavelength value must be unique. Range is TBC."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.5
        maximum     = 3.0
        units       = microns
        items       = {
          type      = double
        }
      }
      {
        name        = weight
        description = "An array of weights with same dimensions as wavelength. They must sum to 1.0."
        type        = array
        minItems    = 1
        maxItems    = 30
        minimum     = 0.0
        maximum     = 1.0
        items       = {
          type      = double
        }
      }
      {
        name        = dispersion
        description = "An array of atmospheric dispersion values"
        type        = array
        minItems    = 1
        maxItems    = 30
        units       = arcsec on sky
        items       = {
          type      = double
        }
      }
    ]
  }

  {
    name            = follow
    description     = """Enable the NGS ADC follow mode. 

When the follow mode is enabled, the NGS ADC will track the dispersion parameters from the TCS or local override dispersion parameters set by the dispersionOverride command.

The ADC stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:                             
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.onTarget = true
<li> state.stream =  {input stream}
</ul>"""
    args = [
      {
        name        = stream
        description = Follow stream from either the TCS or override values.  If value is not given then TCS stream is the default
        enum        = [ TCS, OVERRIDE ]
      }
    ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

