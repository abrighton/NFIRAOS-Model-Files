subsystem = NFIRAOS
component = dm

description = DM Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = setActive 
    description     = """Set the DME to be active or put the DME into de-active/standby mode. (engineering)

While de-active (in standby mode) the DME will disable the high-voltage outputs to the DMs. When active the DMs can be actively driven by either the NCC or the NRTC.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.active = {input active}
</ul>"""
    args = [
      {
        name        = active
        description = target active state  
        type        = boolean
      }
    ]
    requiredArgs = [ active ]
  }

  {
    name            = datum
    description     = """Datum the DMs. 

This command will put the DMEs into calibration mode, activate the DM's high-voltage outputs, flatten the DMs and then take the DMEs out of calibration mode on completion.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.calibMode = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.calibMode = false
<li> state.active = true
</ul>"""
  }

  {
    name            = park
    description     = """Park the DMs. 

This command will put the DMEs into calibration mode, flatten the DMs, deactivate the DM's high-voltage outputs and then take the DMEs out of calibration mode on completion.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.calibMode = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.calibMode = false
<li> state.active = false
</ul>"""
  }

  {
    name            = setCalibMode
    description     = """Put the DMs into or take the DMs out of calibration mode. (calibration)

While in calibration mode, the DM Assembly can send commands to apply as shape to the DMs. When calibration mode is disabled DM Assembly will reject all shape and mirrorFlat commands, as the DMs are assumed to be under the control of the NRTC.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.calibMode = {input calibMode}
</ul>"""
    args = [
      {
        name        = calibMode 
        description = target calibration mode state
        type        = boolean
      }
    ]
    requiredArgs = [ calibMode ]
  }

 {
    name            = shape
    description     = """Calibration command to apply a shape to the DMs. (calibration)

Either the dm0File or dm11File, or both input parameters must be specified. If either dm0File or dm11File is not specified, then the corresponding DM is not moved.

The DM Assembly must be in calibration mode otherwise this command will be rejected.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.calibMode = true
<li> state.active = true
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = dm0File
        description = path to file containing the desired DM0 shape relative to the mirror flat.
        type        = string
      }
      {
        name        = dm11File
        description = path to file containing the desired DM0 shape relative to the mirror flat.
        type        = string
      }
    ]
  }

  {
    name            = mirrorFlat
    description     = """Calibration command to flatten the DMs. (calibration)

The DM Assembly must be in calibration mode otherwise this command will be rejected.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.calibMode = true
<li> state.active = true
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
   args = [
      {
        name        = dm
        description = flag indicating which DM to flatten
        enum        = [ DM0, DM11, BOTH ] 
      }
    ]
    requiredArgs = [ dm ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to all HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO: connections and command status
<li>	\b WARN(ing): unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }


]

