subsystem = NFIRAOS
component = pwfs

description = PWFS Assembly commands.

receive = [

#-----------------------------------------------------------------------
# test
  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }


#-----------------------------------------------------------------------
# debug
  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

#-----------------------------------------------------------------------
# init

  {
    name            = init
    description     = """Prepares the assembly for operation the assembly and read configuration files. (engineering)

This command will internally trigger a stop if required.

The configuration file will specify the following:
<ul>
<li> Identifier of PWFS VCAM HCD
<li> other TBD quasi-static configuration parameters
</ul>

If configName and configVersion are not specified in the input, then the 
default configuration name and version will be used. If only configName is
specified in the input, then the default version for the specified 
configName will be used. If only configVersion is specified in the input,
then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = NOTREADY
<li> state.simulated = FALSE
<li> state.simulatedImageLoaded = FALSE
</ul>"""
    args = [
      {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

#-----------------------------------------------------------------------
# loadSimulatedImage

  {
    name            = loadSimulatedImage
    description     = """Load simulated image in preparation for useSimulatedImage command. (engineering)

The loadSimulatedImage command loads a single frame of simulated data
from a file and send it to the PWFS.  The PWFS can then send this
simulated data as the detector output.

The filename of the input file is passed to the HCD which is responsible
for loading the file and sending it to the VCAM in small pieces.  If the HCD
cannot read the file or if there is an error sending the data to the VCAM
then the HCD will return a command completion with a failed status.

Upon VCAM successfully accepting the final piece of the file, the HCD
will return a command completion with a success status.

The command completion from the HCD is relayed to the AOSQ or Engineering GUI.

\msc "Sequence diagram for loading a simulated image into PWFS"
  AOSQ, Assembly, HCD, VCAM;
  AOSQ->Assembly [label="loadSimulatedImage", linecolor="red"];
  AOSQ<-Assembly [label="Ack", linecolor="red"];
  Assembly->HCD [label="loadSimulatedImage", linecolor="red"];
  Assembly<-HCD [label="Ack", linecolor="red"];
  HCD->VCAM [label="Load simulated image data"];
  HCD<-VCAM [label="Status"];
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status"];
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status"];
  --- [label="HCD continues sending data"];
  ...;
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status (complete)"];
  Assembly<-HCD [label="Command complete", linecolor="red"];
  AOSQ<-Assembly [label="Command complete", linecolor="red"];
\endmsc

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> A valid exposure configuration has already been applied.
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.wfs = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = imageFile 
        description = Filename and path to simulated image.
        type        = string
      }
    ]
    requiredArgs = [ imageFile ]
  }

#-----------------------------------------------------------------------
# park

 {
    name            = park
    description     = """Prepares the PWFS for powering off. 
 
*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.parked = TRUE
</ul>"""
  }


#-----------------------------------------------------------------------
# readSingleFrame

  {
    name            = readSingleFrame
    description     = """Command to read a single frame and save in a file. (calibration)

The file is actually written by the HCD associated with the PWFS. The imageFile is therefore a file/path on the physical server that hosts the HCDs.

\msc "Sequence diagram for reading a single PWFS frame"
  AOSQ, Assembly, HCD, VCAM;
  AOSQ->Assembly [label="readSingleFrame", linecolor="red"];
  AOSQ<-Assembly [label="Ack", linecolor="red"];
  Assembly->HCD [label="readSingleFrame", linecolor="red"];
  Assembly<-HCD [label="Ack", linecolor="red"];
  HCD=>VCAM [label="Expose one frame"];
  HCD<<VCAM [label="Status"];
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status & Data"];
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status & Data"];
  --- [label="HCD continues requesting image data"];
  ...;
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status (complete)"];
  Assembly<<=HCD [label="Command complete", linecolor="red"];
  AOSQ<<=Assembly [label="Command complete", linecolor="red"];
\endmsc

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.readout = IDLE | INITIALIZED
<li> state.pixelStream = NCC
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.readout = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = imageFile 
        description = Filename and path to image destination.
        type        = string
      }
      {
        name        = integrationTime
        description = integration time
        type        = double
        units       = seconds
        minimum     = 0.0
        maximum     = 9.9995
      }
    ]
    requiredArgs = [ imageFile, integrationTime ]
  }



#-----------------------------------------------------------------------
# setBinning

  {
    name            = setBinning
    description     = """Sets the binning factor.

The PWFS detector consists of 256 rows of 256 pixels. If the binning is
not equal to unity, then a smaller number of <i>pixels</i> will be returned
in each frame.

<table class="binningTable">
<tr><th>Binning<th># Rows<th>Pixels/Row<th>Subapertures
<tr><td> 1 <td> 256 <td> 256 <td> 96 x 96
<tr><td> 2 <td> 128 <td> 128 <td> 48 x 48
<tr><td> 4 <td>  64 <td>  64 <td> 24 x 24
<tr><td> 8 <td>  32 <td>  32 <td> 12 x 12
<tr><td>16 <td>  16 <td>  16 <td>  6 x  6
</table>

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.wfs = INITIALIZED | IDLE 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> state.binningFactor = binning
</ul>"""
    args = [
      {
        name        = binning
        description = row and column binning
        enum        = [1, 2, 4, 8, 16]
      }
    ]
    requiredArgs = [ binning ]
  }


#-----------------------------------------------------------------------
# setPixelStream

  {
    name            = setPixelStream
    description     = """Sets the PWFS pixel streams to NRTC, NCC or neither.

The PWFS VCAM can send pixels to either the NRTC or the NCC but cannot 
send the pixel stream to both systems simultaneously.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.pixelStream = target
</ul>"""
    args = [
      {
        name        = target
        description = Desired target for pixel streams
        enum        = [ DISABLED, NRTC, NCC ]
      }
    ]
    requiredArgs = [ target ]
  }


#-----------------------------------------------------------------------
# setRtcDatagramSize

  {
    name            = setRtcDatagramSize
    description     = """Sets the number of pixel rows to include in each UDP datagram sent to the NRTC. (engineering)

Large values decrease system overhead on the NRTC but increase latency.
Up to eight pixel rows can be sent within one datagram, corresponding to a
4KiB pixel payload.

The datagram size is not configurable when the pixel stream is being 
sent to the NCC. The 100Mb Ethernet connection is not configured to support
jumbo frames.

The PWFS detector sends two data streams sent to the NRTC, one stream contains
the pixels from the top half of the detector and the other stream contains 
the pixels from the bottom half of the detector. During each frame, 128 rows
are sent to each stream if the detector is not performing binning.  If the
detector is binning the pixels, then the number of rows sent along with the
length of each row is reduced accordingly.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.wfs = INITIALIZED | IDLE 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = maxRows
        description = Maximum number of PWFS pixel rows per datagram.
        type        = integer
        units       = detector pixel rows
        minimum     = 1
        maximum     = 8
      }
    ]
    requiredArgs = [ maxRows ]
  }


#-----------------------------------------------------------------------
# setRtcDestinations

  {
    name            = setRtcDestinations
    description     = """Explicitly sets the target destinations for the 10Gb/s pixel streams. (engineering)

This command will only be accepted if the PWFS is idle.

This command is primarily used for engineering purposes and allows the PWFS 
10Gb/s pixel stream to be sent to the desired server. It is expected that
under normal circumstances, the setRtcTargets command would be used.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = topAddress
        description = """
IP address of server to accept pixels from top half of the detector.
"""
        type        = string
      }
      {
        name        = topPort
        description = """
Port number of server accepting pixels from top half of the detector.
"""
        type        = integer
      }
      {
        name        = bottomAddress
        description = """
IP address of server to accept pixels from bottom half of the detector.
"""
        type        = string
      }
      {
        name        = bottomPort
        description = """
Port number of server accepting pixels from bottom half of the detector.
"""
        type        = integer
      }
    ]
  }


#-----------------------------------------------------------------------
# setRtcTargets

  {
    name            = setRtcTargets
    description     = """Sets the target destination for the 10Gb/s pixel stream. 

This command will only be accepted if the PWFS is idle.

The PWFS assembly subscribes to the rtcRole.servers struct to determine 
the location of the WCC server which will accept the 10Gb/s PWFS pixel stream.

A configuration number is provided as the input parameter and the assembly will
wait for the specified configuration to be published. Each time the 
rtcRoleAssignment assembly publishes a new role assignment, the configuration
number is incremented.  If the specified configuration number is less than the 
current rtcRole.servers.configNum then the command will be rejected.
  
Once the PWFS assembly receives the rtcRole.servers event with the appropriate
configNum, then rtcRole.servers.wcc is used, along with the network prefix of
the RTC VCAM subnetwork, to set the destination for the 10Gb/s PWFS pixel 
stream.  The RTC VCAM subnetwork is read from a configuration file during
initialization.

The first three bytes of the target IP address are taken from the RTC VCAM
subnetwork and the final byte is the value specified in rtcRole.servers.wcc.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> rtcRole.servers.configNum does not exceed configNumber parameter
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = configNumber 
        description = Configuration number of RTC role to assign.
        type        = integer
      }
    ]
  }

#-----------------------------------------------------------------------
# shutdown

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

#-----------------------------------------------------------------------
# startContinuousExposures

  {
    name            = startContinuousExposures
    description     = """Configures and starts continuous (non-triggered) PWFS exposures. (engineering)

The specified integration time plus the 500 microsecond readout time cannot 
exceed the period which corresponds to the frame rate. That is, the 
integration time and the frame rate must satisfy the following relationship:

<center>
<em>integrationTime + 0.0005 &nbsp; &le; &nbsp; 1 / frameRate</em>
</center>

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.readout = INITIALIZED | IDLE 
<li> if state.pixelStream = NCC then require maximum frame rate is 20 Hz.
<li> if state.pixelStream = NRTC then require maximum frame rate is 800 Hz.
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout = CONTINUOUS
</ul>"""
    args = [
      {
        name        = integrationTime
        description = integration time
        type        = double
        units       = seconds
        minimum     = 0.0
        maximum     = 9.9995
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = Hz
        minimum     = 0.1
        maximum     = 800
      }
    ]
    requiredArgs = [ integration, frameRate ]
  }

#-----------------------------------------------------------------------
# startTriggeredExposures

  {
    name            = startTriggeredExposures
    description     = """Starts triggered PWFS exposures.

The PWFS assembly does not configure the timing interval between trigger pulses.
The frame rate of the trigger pulses must be compatible with the target pixel
stream.  If the NCC is the target of the pixel stream, then the frame rate 
should be limited to no more than 20 Hz. If the NRTC is the target of the 
pixel stream, then the frame rate may up to 800 Hz is supported.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.readout = INITIALIZED | IDLE 
<li> state.pixelStream != DISABLED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout = TRIGGERED
</ul>"""
  }


#-----------------------------------------------------------------------
# stop

 {
    name            = stop
    description     = """Cancel the current discrete type command and aborts any current exposures on the PWFS. Disables the camera frame trigger if enabled.
 
*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = INITIALIZED | IDLE
</ul>"""
  }

#-----------------------------------------------------------------------
# useSimulatedImage

  {
    name            = useSimulatedImage
    description     = """Start using simulated image. (engineering)

Controls whether the PWFS VCAM sends a previously loaded simulated image
or a new exposure in response to any read image operation. 

The useSimulatedImage accepts a single boolean parameter, simulate, which 
if true enables the use of a previously loaded simulated image as the PWFS
detector output.  It is an error to set the simulate flag if no simulated
image has been loaded into the PWFS VCAM.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.wfs = INITIALIZED | IDLE 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = simulated
        description = Boolean representing whether a simulated image is sent in response to each read.
        type        = boolean
      }
    ]
    requiredArgs = [ simulated ]
  }

]

