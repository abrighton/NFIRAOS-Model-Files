subsystem = NFIRAOS
component = ssLgs

description = SS LGS Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.onTarget = true | false
<li> simTcs.zenithAngle = {default from config file}
<li> positionCurrent.altitude = {default from config file}
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

{
    name            = datum
    description     = """Datum both the SS LGS stages. 

This command will internally trigger a stop if required. The final position of the SS LGS focus stage will be set based on the current sodium layer altitude (positionCurrent.altitude) and zenith angle (simTcs.zenithAngle)
 
*Discrete Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT
<li> state.onTarget = true
<li> state.intensity = 0.0
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following type command, stop all SS LGS stages and turn off all LGS simulation sources.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | DEPLOY | INTERMEDIATE | UNKNOWN
<li> state.onTarget = true | false
<li> state.intensity = 0.0
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command to move individual SS LGS stages to the specified positions. (engineering)

At least one input parameter must be specified, all unspecified stages will remain unchanged.

*Discrete Command.*

 Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
<li> if (deploy stage target is specified) state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | DEPLOY | INTERMEDIATE
<li> state.onTarget = true
<li> positionCurrent.altitude = {set based on input focus and simTcs.zenithAngle}
</ul>"""
    args = [
      {
        name        = deploy
        description = target position of the SS LGS deploy stage
        type        = double
        units       = degrees
      }
      {
        name        = focus
        description = "target position SS LGS focus stage, with respect to the FPM reference position"
        type        = double
        units       = mm
        minimum     = 875 
        maximum     = 2515
      }
    ]
  }

  {
    name            = selectDeployment
    description     = """Select to deploy or extracts the LGS simulation sources.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
<li> if (deploy == false) state.intensity = 0.0
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = EXTRACT | DEPLOY 
</ul>"""
    args = [
      {
        name        = deploy
        description = flag indicating if the LGS simulation sources should be deployed.
        type        = boolean
      }
    ]
    requiredArgs = [ deploy ]
  }

  {
    name            = setRangeDistance
    description     = """Set the SS LGS focus stage based on effective sodium layer altitude and zenith angle. 

The altitude and zenith angle are used to compute an effective range distance, which is used to position the LGS sources along the optical axis. The LGS simulation sources must already be deployed.

Some combinations of altitude and angle are unachievable with the limits of stage travel. The following formula must be satisfied, otherwise the command will be rejected. 

<sup>(target altitude)</sup>/<sub>cos(target zenith angle)</sub> &le; 235 km
  
At least one input parameter must be specified, the other target value will remain unchanged. 

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.select = DEPLOY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> simTcs.zenithAngle = {input zenithAngle}
<li> positionCurrent.altitude = {input altitude}
</ul>"""
    args = [
      {
        name        = altitude
        description = target effective sodium layer altitude
        type        = double
        minimum     = 85
        maximum     = 235
        units       = km
      }
      {
        name        = zenithAngle
        description = target effective zenith angle
        type        = double
        minimum     = 1
        maximum     = 65
        units       = degrees
      }
    ]
  }

  {
    name            = runTrajectory
    description     = """Command that reads in a sodium layer altitude and telescope zenith angle trajectory file and positions the SS LGS stage based on the corresponding range distance. 

This command will query the TMT Configuration Service to obtain the specified trajectory file.

The trajectory file consists of two columns: the fist column is a list of sodium layer altitudes in km, while the second column is a list of zenith angles in degrees. 
Rows of the trajectory file are processed at 20 Hz, positioning the SS LGS focus stage accordingly. Once the bottom row is reached, they will be processed in the opposite order, going back and forth between to the top and bottom of the table.

If only trajectoryName is specified in the input, then the default version for the specified trajectoryName will be used. 
  
*Following Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.select = DEPLOY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.onTarget = true | false
<li> simTcs.zenithAngle = {from trajectory file}
<li> positionTarget.altitude = {from trajectory file}

</ul>"""
    args = [
      {
        name        = trajectoryName 
        description = Name of the trajectory file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = trajectoryVersion
        description = Version of the trajectory file to get from the TMT Configuration Service
        type        = string 
      }
    ]
    requiredArgs = [ trajectoryName ] 
  }

  {
    name            = setSourceIntensity
    description     = """Set intensity of the LGS simulation sources. 

The LGS simulation sources must already be deployed. A LUT (TBC) is used to convert the desired photon flux into a PWM duty cycle that is sent to the LED control electronics. A value of zero will turn off the LGS simulation sources.
  
*Simple Command.*

Precondition:
<ul>
<li> state.cmd != READY
<li> state.select = DEPLOY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.intensity = {input intensity}
</ul>"""
    args = [
      {
        name        = intensityLevel
        description = target intensity of LGS simulation sources
        type        = double
        units       = photon flux (TBD)
      }
    ]
    requiredArgs = [ intensity ]
  }

 {
    name            = setPulseWidthModulation
    description     = """Engineering command to set SS LGS source intensity based on PWM duty cycle. (engineering)
  
*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.select = DEPLOY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.intensity = {intensity estimated base on input dutyCycle} 
</ul>"""
    args = [
      {
        name        = dutyCycle
        description = target PWM duty cycle of the LGS simulation sources 
        type        = double
        units       = %
        minimum     = 0 
        maximum     = 100
      }
    ]
    requiredArgs = [ dutyCycle ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

