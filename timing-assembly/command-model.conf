subsystem = NFIRAOS
component = timing

description = Timing Assembly commands.

receive = [

  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the Timing Assembly.

This command is functionally equivalent to calling the stop command, however will also reset internal variable to their initial conditions.
 
*Simple Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[] = false
</ul>"""
  }

  {
    name            = stop
    description     = """Stop all trigger signals.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> trigger.enable[] = false
</ul>"""
  }

  {
    name            = enableTrigger
    description     = """Configure and start all of the trigger signals.

This high-level command is used to configure and start the full set of trigger signals required for typical NFIRAOS observations.

The fundamental AO period, P<sub>0</sub> must be specified (normally 1/800 Hz = 1250 microseconds). All triggers a then specified using a period multiplier relative to the fundamental AO period, P<sub>0</sub>. Any channel for which a period is not specified will be disabled.

Each of the signal generators that are used to produce the pulses will be daisy-chained together, using one (designated as the master) to generate a reference clock for the others (slaves). This reference clock will run at an integer multiple of the fundamental AO period P<sub>0</sub>, in the range 10--100 MHz (e.g., if P<sub>0</sub>=800 Hz, the clock might run at 80 MHz). The optional *_delay attribute for each channel is a static offset relative to this reference signal.

The start time specifies the time at which the first trigger pulse will be generated. If the start time has already elapsed then the first trigger pulse will occur as soon as possible.

The LGS WFS period and delay apply to all LGS WFSs that are set active in the configuration file. All trigger signals associated with non-active LGS WFS are disabled.

Channels 0 to 12 are allocated to client instrument OIWFSs and ODGWs. It is up to the AOSQ to known which instrument detectors are physically connected to each of trigger channels 0 through 12 (TBD, it is possible that the NCC will abstract this information through config files).

*Following Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> trigger.aoPeriod = {input ao_period}
<li> trigger.clockPeriod = {computed based on input ao_period}
<li> trigger.enable[{input channel}] = true
<li> trigger.period[{input channel}] = {input period}
<li> trigger.startTime[{input channel}] = {input startTime}
</ul>"""
    args = [
      {
        name        = ao_period
        description = "fundamental AO period, P<sub>0</sub>"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfs_period
        description = "Period for all of the LGS WFSs relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = lgsWfs_delay
        description = "Delay for all of the LGS WFSs"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = pwfs_period
        description = "Period for PWFS relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = pwfs_delay
        description = "Delay for PWFS"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = vnwFsm_period
        description = "Period for VNW FSM relative to P<sub>0</sub>, must be a multiple of 4"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 4
      }
      {
        name        = vnwFsm_delay
        description = "Delay for VNW FSM"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel0_period
        description = "Period for Channel 0 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel0_delay
        description = "Delay for Channel 0"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel1_period
        description = "Period for Channel 1 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel1_delay
        description = "Delay for Channel 1"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel2_period
        description = "Period for Channel 2 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel2_delay
        description = "Delay for Channel 2"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel3_period
        description = "Period for Channel 3 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel3_delay
        description = "Delay for Channel 3"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel4_period
        description = "Period for Channel 4 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel4_delay
        description = "Delay for Channel 4"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel5_period
        description = "Period for Channel 5 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel5_delay
        description = "Delay for Channel 5"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel6_period
        description = "Period for Channel 6 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel6_delay
        description = "Delay for Channel 6"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel7_period
        description = "Period for Channel 7 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel7_delay
        description = "Delay for Channel 7"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel8_period
        description = "Period for Channel 8 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel8_delay
        description = "Delay for Channel 8"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel9_period
        description = "Period for Channel 9 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel9_delay
        description = "Delay for Channel 9"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel10_period
        description = "Period for Channel 10 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel10_delay
        description = "Delay for Channel 10"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel11_period
        description = "Period for Channel 11 relative to P<sub>0</sub>"
        type        = integer
        units       = number of fundamental AO periods
        minimum     = 1
      }
      {
        name        = channel11_delay
        description = "Delay for Channel 11"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
          name        = startTime
          description = "time at which the first pulse of the trigger signal should occur"
          type        = double
          units       = "TAI / PTP"
      }
    ]
    requiredArgs = [ ao_period ]
  }

  {
    name            = testEnableTrigger
    description     = """Configure and start all of the trigger signals. (engineering)

All channel periods must a multiple of the clock period. 

Each of the signal generators that are used to produce the pulses will be daisy-chained together, using one (designated as the master) to generate a reference clock for the others (slaves). The optional *_delay attribute for each channel is a static offset relative to this reference signal. 

The start time specifies the time at which the first trigger pulse will be generated. If the start time has already elapsed then the first trigger pulse will occur as soon as possible.

Channels 0 to 12 are allocated to client instrument OIWFSs and ODGWs. It is up to the AOSQ to known which instrument detectors are physically connected to each of trigger channels 0 through 12 (TBD, it is possible that the NCC will abstract this information through config files).

Any channel for which a period is not specified will not be activated.

*Following Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> trigger.aoPeriod = {minimum of all specified input channel periods}
<li> trigger.clockPeriod = {input ao_period}
<li> trigger.enable[{input channel}] = true
<li> trigger.period[{input channel}] = {input period}
<li> trigger.startTime[{input channel}] = {input startTime}
</ul>"""
    args = [
      {
          name        = clock_period
          description = "period of the signal generator's clock"
          type        = double
          minimum     = 0.01
          maximum     = 0.1
          units       = microseconds
      }
      {
        name        = lgsWfsA_period
        description = "Absolute period for LGS WFS A"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfsA_delay 
        description = "Delay for LGS WFS A"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = lgsWfsB_period
        description = "Absolute period for LGS WFS B"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfsB_delay
        description = "Delay for LGS WFS B"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = lgsWfsC_period
        description = "Absolute period for LGS WFS C"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfsC_delay
        description = "Delay for LGS WFS C"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = lgsWfsD_period
        description = "Absolute period for LGS WFS D"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfsD_delay
        description = "Delay for LGS WFS D"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = lgsWfsE_period
        description = "Absolute period for LGS WFS E"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfsE_delay
        description = "Delay for LGS WFS E"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = lgsWfsF_period
        description = "Absolute period for LGS WFS F"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = lgsWfs_delay
        description = "Delay for LGS WFS F"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = pwfs_period
        description = "Absolute period for PWFS"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = pwfs_delay
        description = "Delay for PWFS"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = vnwFsm_period
        description = "Absolute period for VNW FSM"
        type        = double
        units       = microseconds
        minimum     = 5000
      }
      {
        name        = vnwFsm_delay
        description = "Delay for VNW FSM"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel0_period
        description = "Absolute period for Channel 0"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel0_delay
        description = "Delay for Channel 0"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel1_period
        description = "Absolute period for Channel 1"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel1_delay
        description = "Delay for Channel 1"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel2_period
        description = "Absolute period for Channel 2"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel2_delay
        description = "Delay for Channel 2"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel3_period
        description = "Absolute period for Channel 3"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel3_delay
        description = "Delay for Channel 3"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel4_period
        description = "Absolute period for Channel 4"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel4_delay
        description = "Delay for Channel 4"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel5_period
        description = "Absolute period for Channel 5"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel5_delay
        description = "Delay for Channel 5"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel6_period
        description = "Absolute period for Channel 6"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel6_delay
        description = "Delay for Channel 6"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel7_period
        description = "Absolute period for Channel 7"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel7_delay
        description = "Delay for Channel 7"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel8_period
        description = "Absolute period for Channel 8"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel8_delay
        description = "Delay for Channel 8"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel9_period
        description = "Absolute period for Channel 9"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel9_delay
        description = "Delay for Channel 9"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel_period
        description = "Absolute period for Channel 10"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel10_delay
        description = "Delay for Channel 10"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
        name        = channel11_period
        description = "Absolute period for Channel 11"
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = channel11_delay
        description = "Delay for Channel 11"
        type        = double
        units       = microseconds
        minimum     = 0
      }
      {
          name        = startTime
          description = "time at which the first pulse of the trigger signal should occur"
          type        = double
          units       = "TAI / PTP"
      }
    ]
    requiredArgs = [ clock_period ]
  }


  {
    name            = modifyTrigger
    description     = """Modify a single trigger.

This commands is used to change the settings of a single trigger.

If a previous enableTrigger or testEnableTrigger command was issued (state.cmd = CONTINUOUS), and the assembly is actively triggering, this command will modify the period of the selected channel without affecting any of the other channels. 

A modifyTrigger command will not be accepted if it would modify the clock frequency. For example, if the clock frequency is 80MHz then the modifyTrigger command would not be allowed if the requested trigger period were 1250.00625 microseconds.

An optional future start time can be specified. If the start time has already elapsed, the assembly will implement the new channel settings as quickly as possible.

*Friendly Command*

Precondition:
<ul>
<li> state.cmd = CONTINUOUS
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> trigger.enable[{input channel}] = true
<li> trigger.period[{input channel}] = {input period}
<li> trigger.startTime[{input channel}] = {input startTime}
</ul>"""
    args = [
      {
        name        = channel
        description = """specific trigger signal to modify
<ul>
<li> input channel set to LGSWFS mean all six LGS WFS trigger signals will be modified with the same period and start time.
<li> input channel set to any other value means only the corresponding trigger signals will be modified with the specified period and start time.
</ul>"""
        enum        = [ LGSWFS, LGSWFSA, LGSWFSB, LGSWFSC, LGSWFSD, LGSWFSE, LGSWFSF, PWFS, VNWFSM, CHANNEL0, CHANNEL1, CHANNEL2, CHANNEL3, CHANNEL4, CHANNEL5, CHANNEL6, CHANNEL7, CHANNEL8, CHANNEL9, CHANNEL10, CHANNEL11 ]
      }
      {
          name        = period
          description = "absolute period of the trigger pulses"
          type        = double
          units       = "microseconds"
          minimum     = 0
      }
      {
        name        = delay
        description = "delay for the trigger with respect to the clock signal"
        type        = double
        units       = "microseconds"
        minimum     = 0
      }
      {
          name        = startTime
          description = "time at which the first pulse of the trigger signal should occur"
          type        = double
          units       = "TAI / PTP"
      }
    ]
    requiredArgs = [ channel, period ]
  }

  {
    name            = disableTrigger
    description     = """Stop the specified trigger signal.

The cmd state will remain CONTINUOUS, regardless of whether any trigger signals are still enabled after this command is complete. In this way the reference clock signal for the signal generators will continue to run at an integer multiple of the AO period P<sub>0</sub>, and any individual trigger may be restarted using the modifyTrigger command.

*Friendly Command.*

Precondition:
<ul>
<li> state.cmd = CONTINUOUS
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> trigger.enable[{input channel}] = false
</ul>"""
    args = [
      {
        name        = channel
        description = """specific trigger signal to stop
<ul>
<li> input channel set to LGSWFS mean all six LGS WFS trigger signals will be disabled
<li> input channel set to ALL means all twenty-one trigger signals will be disabled
<li> input channel set to any other value means only the corresponding trigger signals will be disabled
</ul>"""
        enum        = [ LGSWFS, LGSWFSA, LGSWFSB, LGSWFSC, LGSWFSD, LGSWFSE, LGSWFSF, PWFS, VNWFSM, CHANNEL0, CHANNEL1, CHANNEL2, CHANNEL3, CHANNEL4, CHANNEL5, CHANNEL6, CHANNEL7, CHANNEL8, CHANNEL9, CHANNEL10, CHANNEL11, ALL ]
      }
    ]
    requiredArgs = [ channel ]
  }

 {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]
