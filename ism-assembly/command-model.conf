subsystem = NFIRAOS
component = ism

description = ISM Assembly commands.

receive = [
 {
    name            = init
    description     = """Prepares the assembly for operation and read configuration files. (engineering) 

This command will internally trigger a stop if required. This command will also clear (set to 0) all ISM position offsets in rotation and tilt.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

The configuration file will specify named ISM locations.  It will include:
<ul>
<li> Top, bottom and side portion locations, 
<li> NSEN position for the top, bottom and side port
</ul>

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> config.defaultPos  = {default from config file}
<li> config.posTolerance = {default from config file} 
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]

  }

{
    name            = datum
    description     = """Datum the ISM stages. 

This command will internally trigger a stop if required. This command will also clear all ISM position offsets to the values set in current.offsetRotation_config and current.offsetTilt_config.  Those values are read in from the configuration file, if provided.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = UNKNOWN
<li> state.nsen = false
<li> current.datumRotation = false
<li> current.datumTilt = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = {default from config file}
<li> state.nsen = {dependent on the defaultPos selected in the config file}
<li> current.datumRotation = true
<li> current.datumTilt = true
<li> current.offsetRotation = 0.0
<li> current.offsetTilt = 0.0
<li> current.netRotation = {depends on position moved to}
<li> current.netTilt = {depends on position moved to}
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete type command and stop the ISM stages.

If currently datumming the stages will be stopped and the datum flags set to false.  If this is a stop of a movement then when the stages are stopped, the position is checked against the named positions (within tolerance).

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = BOTTOM | SIDE | TOP | INTERMEDIATE | UNKNOWN 
<li> state.nsen = {as determined}
<li> current.netRotation = {depends on position moved to}
<li> current.netTilt = {depends on position moved to}
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command to move the ISM stages to the specified position. (engineering)
 
At least one argument must be specified. If the Rotation or Tilt input parameter is not specified, then the corresponding stage will not be moved. This command will also clear ISM position offset for the specified stage.

The ISM stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE
<li> state.nsen = false
<li> target.select = {depends on input to command}
<li> target.netRotation = {depends on input to command}
<li> target.netTilt = {depends on input to command}


</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = BOTTOM | SIDE | TOP | INTERMEDIATE
<li> state.nsen = {as determined}
<li> current.offsetRotation = 0.0
<li> current.offsetTilt = 0.0
<li> current.netRotation = {depends on input to command}
<li> current.netTilt = {depends on input to command}
</ul>"""
    args = [
      {
        name        = Rotation
        description = target rotation about x-axis of ISM stage.
        type        = double
        units       = milliradian
        maximum     = 5
        minimum     = -5 
      }
      {
        name        = Tilt
        description = target rotation about y-axis of ISM stage.
        type        = double
        units       = milliradian
        maximum     = 1658
        minimum     = -1658
      }
    ]
  }

  {
    name            = select
    description     = """Position the ISM to direct light to the NFIRAOS bottom, side or top port positions. 

If the NSEN flag is set then alternative port positions are used, which may be slightly offset from the nominally instrument bottom, side and top port positions. If the NSEN input parameter flag is not specified, then it will be set to false

If x or y offsets are specified, then these offset vales will be added to the selected port position. If the offset input parameters are not specified, then offset will be cleared (setting them to zero).   

The ISM stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
<li> state.select = INTERMEDIATE 
<li> target.select = {depends on input to command}
<li> target.netRotation = {depends on input to command}
<li> target.netTilt = {depends on input to command}
<li> current.offsetRotation = {depends on input to command}
<li> current.offsetTilt = {depends on input to command}
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.select = BOTTOM | SIDE | TOP | NSEN_BOTTOM | NSEN_SIDE | NSEN_TOP
<li> state.nsen = {input nsen}
<li> current.netRotation = {depends on input to command}
<li> current.netTilt = {depends on input to command}
<li> current.offsetRotation = {depends on input to command}
<li> current.offsetTilt = {depends on input to command}
</ul>"""
    args = [
      {
        name        = select
        description = "Choice of either bottom, side or top port positions or one of the NSEN bottom, side, or top positions.  Each top, side, and bottom 'positions' correspond to the equivalent top, side, and bottom port gates.  All named positions come from the configuration file"
        enum        = [ BOTTOM, SIDE, TOP, NSEN_BOTTOM, NSEN_SIDE, NSEN_TOP ] 
      }
      {
        name        = yOffset
        description = rotation offset about y-axis of ISM stage relative to selected port position.
        type        = double
        units       = milliradian
        maximum     = 5
        minimum     = -5 
      }
      {
        name        = xOffset
        description = rotation offset about x-axis of ISM stage relative to  selected port position.
        type        = double
        units       = milliradian
        maximum     = 5
        minimum     = -5 
      }
    ]
    requiredArgs = [ select ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

