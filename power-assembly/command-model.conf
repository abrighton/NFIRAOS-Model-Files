subsystem = NFIRAOS
component = power

description = Power Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = setOutlet
    description     = """Sets the power state (ON|OFF) of an outlet on a NCC power bar. (engineering)

*Simple Command.*
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = outlet
        description = outlet id
        enum        = [ 1, 2, 3, 4, 5, 6, 7, 8 ]
      }
      {
        name        = bar
        description = power bar id
        enum        = [ 1, 2, 3, 4, 5, 6 ]
      }
      {
        name        = state
        description = target power state of the specified outlet
        enum        = [ ON, OFF ]
      }
    ]
    requiredArgs = [ outlet, bar, state ]
  }

  {
    name            = setDevice
    description     = """Sets the power state (ON|OFF) of an device plugged into a NCC power bar.

*Simple Command.*
  
Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = device
        description = unique device string as specified in the configuration file
        type        = string
      }
      {
        name        = state
        description = target power state of the specified outlet
        enum        = [ ON, OFF ]
      }
    ]
    requiredArgs = [ device, state ]
  }


  {
    name            = park
    description     = """Turn off all unused outlets and outlets corresponding non-essential devices in NFIRAOS (i.e. those with a type equal to INACTIVE or HIBERNATE). 

This command is intended to be used at the end of the night.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = datum
    description     = """Turn on all outlets corresponding to devices in NFIRAOS (i.e. those with a type equal to ACTIVE or HIBERNATE). 

This command is intended to be used at the beginning of the night.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

