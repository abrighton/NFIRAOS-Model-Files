subsystem = NFIRAOS
component = lgsWfs

description = LGS WFS Assembly commands.

receive = [
  
#-----------------------------------------------------------------------
# test
  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }


#-----------------------------------------------------------------------
# debug
  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }


#-----------------------------------------------------------------------
# enableWfs

  {
    name            = enableWfs
    description     = """Enables the LGS WFS for use. 

The enableWfs command is used to enable or disable either an individual
LGS WFS or all LGS WFS. Disabling a particular LGS WFS allows NFIRAOS to run
without requiring the disabled LGS WFS.

For other LGS WFS Assembly commands, when the wfs parameter is ALL, then the
assembly will apply the command to each of the currently enabled LGS WFS.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfsEnabled[wfs] = enableFlag
</ul>"""
    args = [
      {
        name        = wfs 
        description = """specify which LGS WFS to set the mode, 'ALL' applies to all six LGS WFS"""
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = enableFlag
        description = """Desired state (enabled when enableFlag=true, or disabled when enableFlag=false) of the LGS WFS."""
        type        = boolean
      }
    ]
    requiredArgs = [ wfs, enableFlag ]
  }

#-----------------------------------------------------------------------
# init

  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will internally trigger a stop if required.

The configuration file will specify the following for all 6 LGS WFSs:
<ul>
<li> enable/disable LGS WFS
<li> identifier for each LGS WFS HCD
</ul>

If configName and configVersion are not specified in the input, then the
default configuration name and version will be used. If only configName is
specified in the input, then the default version for the specified configName
will be used. If only configVersion is specified in the input, then an error
is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs[enabled WFS] = ACTIVE | UNKNOWN
<li> state.wfs[disabled WFS] = DISABLED
<li> state.readout[disabled WFS] = NOTREADY | UNKNOWN
<li> state.hwSimulated[*] = INACTIVE
</ul>
"""
    args = [
      {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }


#-----------------------------------------------------------------------
# loadSimulatedImage

  {
    name            = loadSimulatedImage
    description     = """Load simulated image in preparation for useSimulatedImage command. (engineering)

The loadSimulatedImage command loads a single frame of simulated data
from a file and sends it to one LGS WFS VCAM.  The LGS WFS VCAM can
then send this simulated data as the detector output.

The filename of the input file is passed to the HCD which is responsible
for loading the file and sending it to the VCAM in small pieces.  If the HCD
cannot read the file or if there is an error sending the data to the VCAM
then the HCD will return a command completion with a failed status.

Upon VCAM successfully accepting the final piece of the file, the HCD
will return a command completion with a success status.

The command completion from the HCD is relayed to the AOSQ or Engineering GUI.

*Discrete Command.*

\msc "Sequence diagram for loading a simulated image into a LGS WFS"
  AOSQ, Assembly, HCD, VCAM;
  AOSQ->Assembly [label="loadSimulatedImage", linecolor="red"];
  AOSQ<-Assembly [label="Ack", linecolor="red"];
  Assembly->HCD [label="loadSimulatedImage", linecolor="red"];
  Assembly<-HCD [label="Ack", linecolor="red"];
  HCD->VCAM [label="Load simulated image data"];
  HCD<-VCAM [label="Status"];
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status"];
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status"];
  --- [label="HCD continues sending data"];
  ...;
  HCD->VCAM [label="Continuation data"];
  HCD<-VCAM [label="Status (complete)"];
  Assembly<-HCD [label="Command complete", linecolor="red"];
  AOSQ<-Assembly [label="Command complete", linecolor="red"];
\endmsc

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> A valid exposure configuration has already been applied.
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.wfs = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> state.hwSimulated[wfs] = IMAGE_LOADED
</ul>"""
    args = [
      {
        name        = wfs 
        description = "Specify which LGS WFS will load simulated image."
        enum        = [ A, B, C, D, E, F ] 
      }
      {
        name        = imageFile 
        description = "Filename and path to simulated image."
        type        = string
      }
    ]
    requiredArgs = [ wfs, imageFile ]
  }

#-----------------------------------------------------------------------
# park


  {
    name            = park
    description     = """Prepares the specified LGS WFS hardware for being powered off. This stops any exposure in progress. 

*Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.wfs[specified WFS] == ACTIVE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[enabled WFS] = NOTREADY | INITIALIZED | IDLE
<li> state.parked[enabled WFS] = TRUE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to park, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
    ]
    requiredArgs = [ wfs ]
  }


#-----------------------------------------------------------------------
# readSingleFrame

  {
    name            = readSingleFrame
    description     = """Command to read a single frame and save in a file. (calibration)

Uses the existing exposure configuration.<br>

The file is actually written by the HCDs associated with each WFS. The imageFile is therefore a file/path on the physical server(s) that host the HCDs.

\msc "Sequence diagram for reading a single LGS WFS frame"
  AOSQ, Assembly, HCD, VCAM;
  AOSQ->Assembly [label="readSingleFrame", linecolor="red"];
  AOSQ<-Assembly [label="Ack", linecolor="red"];
  Assembly->HCD [label="readSingleFrame", linecolor="red"];
  Assembly<-HCD [label="Ack", linecolor="red"];
  HCD=>VCAM [label="Expose one frame"];
  HCD<<VCAM [label="Status"];
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status & Data"];
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status & Data"];
  --- [label="HCD continues requesting image data"];
  ...;
  HCD=>VCAM [label="Continuation data command"];
  HCD<<VCAM [label="Status (complete)"];
  Assembly<<=HCD [label="Command complete", linecolor="red"];
  AOSQ<<=Assembly [label="Command complete", linecolor="red"];
\endmsc

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> A valid exposure configuration has already been applied.
<li> state.pixelStream = NCC  
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.wfs = SINGLE
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to set the mode, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F ] 
      }
      {
        name        = imageFile 
        description = "Filename and path to image destination."
        type        = string
      }
    ]
    requiredArgs = [ wfs, imageFile ]
  }

#-----------------------------------------------------------------------
# setPixelStream

  {
    name            = setPixelStream
    description     = """Sets the pixel streams for LGS WFS to NRTC, NCC or neither.

Each LGS WFS VCAM can send pixels to either the NRTC or the NCC but cannot 
send the pixel stream to both systems simultaneously.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY </li>
<li> if wfs == ALL, then target != NCC.</li>
</ul>
Execution:
<ul>
<li> state.cmd = BUSY</li>
</ul>
At Completion:
<ul>
<li> state.cmd = READY</li>
<li> state.pixelStream[wfs] = target</li>
</ul>
"""
    args = [
      {
        name        = wfs 
        description = "Specifies which LGS WFS pixel streams is being directed."
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = target
        description = "Desired target for pixel streams."
        enum        = [ DISABLED, NRTC, NCC ]
      }
    ]
    requiredArgs = [ wfs, target ]
  }

#-----------------------------------------------------------------------
# setRtcDatagramSize

  {
    name            = setRtcDatagramSize
    description     = """Sets the maximum number of subapertures to include in each UDP datagram sent to the NRTC. (engineering)

Large values decrease system overhead on the NRTC but increase latency.
Up to 20 subapertures can be sent within one datagram, corresponding to a
4KiB pixel payload.

The datagram size is not configurable when the pixel stream is being 
sent to the NCC. The 100Mb Ethernet connection is not configured to support
jumbo frames.

The LGS WFS detector sends four data streams sent to the NRTC, each stream 
contains the pixels from one LGS WFS quadrant.  During each frame, 
724 subapertures are sent in each stream.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.wfs = INITIALIZED | IDLE 
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "Set datagram size for this LGS WFS."
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = maxSubapertures
        description = "Maximum number of subapertures per datagram."
        type        = integer
        units       = subapertures
        minimum     = 1
        maximum     = 20
      }
    ]
    requiredArgs = [ wfs, maxSubapertures ]
  }

#-----------------------------------------------------------------------
# setRtcDestinations

  {
    name            = setRtcDestinations
    description     = """Explicitly sets the target destinations for the 10Gb/s pixel streams for one LGS WFS. (engineering) 

This command will only be accepted if the LGS WFS are idle.

This command is primarily used for engineering purposes and allows any LGS WFS 
10Gb/s pixel stream to be sent to the desired server. It is expected that
under normal circumstances, the setRtcTargets command would be used.

If only wfs, q1address and q1port are specified, then the quadrant I IP
address will be used for all four quadrants and the four quadrants will
use consecutive port numbers starting with the value specified in q1port.
This covers the common case of a single HOP server processing one LGS WFS
pixel stream.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = wfs 
        description = "Set RTC pixel stream destinations for this WFS."
        enum        = [ A, B, C, D, E, F ] 
      }
      {
        name        = q1addr
        description = "IP address of server to accept pixels from quadrant I of the detector."
        type        = string
      }
      {
        name        = q1port
        description = "Port number of server accepting pixels from quadrant I of the detector."
        type        = integer
      }
      {
        name        = q2addr
        description = "IP address of server to accept pixels from quadrant II of the detector."
        type        = string
      }
      {
        name        = q2port
        description = "Port number of server accepting pixels from quadrant II of the detector."
        type        = integer
      }
      {
        name        = q3addr
        description = "IP address of server to accept pixels from quadrant III of the detector."
        type        = string
      }
      {
        name        = q3port
        description = "Port number of server accepting pixels from quadrant I of the detector."
        type        = integer
      }
      {
        name        = q4addr
        description = "IP address of server to accept pixels from quadrant IV of the detector."
        type        = string
      }
      {
        name        = q4port
        description = "Port number of server accepting pixels from quadrant IV of the detector."
        type        = integer
      }
    ]
    requiredArgs = [ wfs, q1addr, q1port, q2addr, q2port, q3addr, q3port, q4addr, q4port ]
  }



#-----------------------------------------------------------------------
# setRtcTargets

  {
    name            = setRtcTargets
    description     = """Sets the target destinations for the 10Gb/s pixel streams. 

This command will only be accepted if the LGS WFS is idle.

The LGS WFS assembly subscribes to the rtcRole.servers struct to determine 
the location of the HOP servers which will accept the 10Gb/s LGS WFS pixel 
streams.

A configuration number is provided as the input parameter and the assembly will
wait for the specified configuration to be published. Each time the 
rtcRoleAssignment assembly publishes a new role assignment, the configuration
number is incremented.  If the specified configuration number is less than the 
current rtcRole.servers.configNum then the command will be rejected.
  
Once the LGS WFS assembly receives the rtcRole.servers event with the
appropriate configNum, then the rtcRole.servers.hop attributes are used, 
along with the
network prefix of the RTC VCAM subnetwork, to set the destination for the
10Gb/s LGS WFS pixel streams.  The RTC VCAM subnetwork is read from a 
configuration file during initialization.

For each LGS WFS VCAM, the first three bytes of the target IP address are 
taken from the RTC VCAM subnetwork and the final byte is the value specified 
in corresponding rtcRole.servers.hop[] attribute.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> rtcRole.servers.configNum does not exceed configNumber parameter
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = configNumber 
        description = "Configuration number of RTC role to assign."
        type        = integer
      }
    ]
  }

#-----------------------------------------------------------------------
# shutdown

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }


#-----------------------------------------------------------------------
# startContinuousExposures

  {
    name            = startContinuousExposures
    description     = """Configures and starts continuous (non-triggered) exposures an one LGS WFS. (engineering)
  
Only one LGS WFS may be in continuous mode at a given time. This mode is used
solely for engineering purposes.  Continuous LGS WFS exposures are only 
supported when the NRTC is the target for the pixel streams.

The specified integration time plus the 500 microsecond readout time cannot
exceed the period which corresponds to the frame rate. That is, the
integration time and the frame rate must satisfy the following relationship:
<br>
<center>
<em>integrationTime + 0.0005 &nbsp; &le; &nbsp; 1 / frameRate</em>
</center>

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != READY
<li> state.readout[specified WFS] = INITIALIZED | IDLE 
<li> state.pixelStream = NRTC
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = CONTINUOUS
</ul>"""
    args = [
       {
        name        = wfs 
        description = "specify which LGS WFS to configure"
        enum        = [ A, B, C, D, E, F ] 
      }
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
        minimum     = 0.000050
        maximum     = 0.009500
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
        minimum     = 100
        maximum     = 800
      }
    ]
    requiredArgs = [ wfs, integration, frameRate ]
  }

#-----------------------------------------------------------------------
# startTriggeredExposures

  {
    name            = startTriggeredExposures
    description     = """Starts triggered LGS WFS exposures.
  
Triggered LGS WFS exposures are only supported when the NRTC is the target for
the pixel streams.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != READY
<li> state.readout[specified WFS] = INITIALIZED | IDLE 
<li> state.pixelStream = NRTC
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[specified WFS] = IDLE
</ul>"""
    args = [
       {
        name        = wfs 
        description = "specify which LGS WFS to configure, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
      {
        name        = integration
        description = integration time
        type        = double
        units       = seconds
        minimum     = 0.000050
        maximum     = 0.009500
      }
      {
        name        = frameRate
        description = number of frames per second when in continuous mode
        type        = double
        units       = seconds
        minimum     = 100
        maximum     = 800
      }
    ]
    requiredArgs = [ wfs, integration, frameRate ]
  }
#-----------------------------------------------------------------------
# stop


  {
    name            = stop
    description     = """Cancel the discrete type command and aborts any current exposures on all specified LGS WFSs. Disables any camera frame triggers that are enabled.

If no WFSs are specified in the input, then all LGS WFSs are stopped.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.wfs[specified WFS] == ACTIVE
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.readout[enabled WFS] = NOTREADY | INITIALIZED | IDLE
</ul>"""
    args = [
      {
        name        = wfs 
        description = "specify which LGS WFS to initialize, 'ALL' only applies to enabled WFS"
        enum        = [ A, B, C, D, E, F, ALL ] 
      }
    ]
    requiredArgs = [ wfs ]
  }

#-----------------------------------------------------------------------
# useSimulatedImage

  {
    name            = useSimulatedImage
    description     = """Start using simulated image. (engineering)

Controls whether the specified LGS WFS VCAM sends a previously loaded 
simulated image or a new exposure in response to any read image operation. 

The useSimulatedImage command accepts a WFS specifier and a boolean
parameter, simFlag, which if true enables the use of a previously
loaded simulated image as the LGS WFS detector output.  It is an error to
set the simulate flag if no simulated image has been loaded into the 
specified LGS WFS VCAM.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY 
<li> state.readout[wfs] = INITIALIZED | IDLE
<li> state.wfsEnabled[wfs] = true
<li> state.hwSimulated[wfs] = IMAGE_LOADED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.wfs = IDLE
<li> state.hwSimulated[wfs] = ACTIVE (if simFlag) | IMAGE_LOADED (if !simFlag)
</ul>"""
    args = [
      {
        name        = wfs 
        description = "Set (or clear) the useSimulatedData flag for this WFS."
        enum        = [ A, B, C, D, E, F ] 
      }
      {
        name        = simFlag
        description = Boolean representing whether a simulated image is sent in response to each read.
        type        = boolean
      }
    ]
    requiredArgs = [ wfs, simFlag ]
  }

]

