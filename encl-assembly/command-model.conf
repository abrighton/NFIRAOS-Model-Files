subsystem = NFIRAOS
component = encl	

description = ENCL Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files (engineering). 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name	          = cooldown
    description	    = """Instruct the Optical Enclosure to start cooling and operate in its cold temperature mode.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM | WARMING
<li> state.accessibility = RESTRICTED
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = COOLING | COLD
</ul>"""  
  }

  {
    name	          = warmup
    description     = """Instruct the Optical Enclosure to start warming and operate in its warm (ambient) temperature mode. (engineering)

*Simple Command.*

Precondiction:
<ul>
<li> state.cmd != UNINITALIZED
<li> state.temperature = COLD | COOLING
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.temperature = WARMING | WARM
</ul>"""
 }

 {
   name 	          = allowAccess 
   description	    = """Instruct the Optical Enclosure to personnel access into the enclosure is allowed. (engineering)  

The unlock doors and ensure there is a suitable environment inside the enclosure is handled by the NFIRAOS Safety System. This command provides adequate lighting and air flow within the enclosure (TBC).

"Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature = WARM
<li> state.adaptiveOptics = OFF
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if {input allowAccess} 
  <ul>
  <li> then state.accessibility = ACCESSIBLE | RESTRICTED
  <li> else state.accessibility = RESTRICTED
  </ul>
</ul>"""
    args = [
      {
        name	    = allowAccess
        description = specifies whether or not to access to the enclosure is allowed.
        enum	    = [TRUE, FALSE]

      }
    ]
 }

 {
   name		    = quiet
   description	    = """Instruct the enclosure to actively run in quiet mode.

When in quiet mode, the enclosure will not cause any disruptions such as vibration within the telescope.  When the optical enclosure is running in quiet mode, the AHU and internal fans, and all vabration causing equipment will be stopped.  Quiet mode is used whenever the telescope is observing or requires no vibration is caused to the platform or internal components.  

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.adaptiveOptics = OFF
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.quiet = {input enableQuietOperation}
<li> state.standby = false
</ul>"""
    args = [
      {
        name 	    = enableQuietOperation
        description = Indicates whether or not vibration is allowed by the enclosure or if it should run without any vibration to the platform.
        enum        = [TRUE, FALSE]
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the optical enclosure. 

This command is equivalent to calling the quiet command with the enableQuietOperation input set to true.  
  
*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.adaptiveOptics = OFF
<li> state.accessibility = RESTRICTED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.quiet = true
<li> state.standby = false
</ul>"""
  }

  {
    name		    = standby
    description	    = """Instructs the optical enclosure to go standby mode.

This will tell the enclosure to maintain its warm or cold state and run in a lower power state.  Generally, this indicates that the optical enclosure components will not be needed for an extended period of time and is instructed to hibernate until it is needed again.

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.temperature != COOLING | WARMING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.standby = {input enableStandby}
<li> state.quiet = FALSE
</ul>"""
    args = [
      {
        name 	    = enableStandby
        description = Indicates if the enclosure should enter standby mode (TRUE) or leave standby mode (false).
        enum        = [TRUE, FALSE]
      }
    ]
 }


{
   name		    = setPortGateState
   description	    = """Instructs the optical enclosure to open or close a port gate.

This will tell the enclosure to change the state of an instrument port gate cover.  The port gate "valves" can either be set to be opened or closed and the result is dependent on the current conditions inside and outside of the enclosure.  If conditions will pose a hazard to the enclosure conditions (such as the enclosure is running cold and nothing is connected to a port gate that instructed to open), then the command will be rejected.  This command will also be rejected if the environmental conditions pose a hazard (such as the temperature differentials greater than 0.5 degrees Celsius may cause frost/condensation).  When evaluating the environmental conditions, the encl will consider not only the current conditions of the encl and port gate, but also the current conditions of the expected instrument as specified in the encl configuration.  

*Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> portGate.{input portGateId} = {input portGateState}
</ul>"""
    args = [
      {
        name 	    = portGateId
        description = The identifier for the port gate to set the state.
        enum        = [TOP, SIDE, BOTTOM]
      }

      {
        name 	    = portGateState
        description = The desired state of the port gate.
        enum        = [OPEN, CLOSE]
      }
    ]
 }

{
   name		    = setInputWindowShutterState
   description	    = """Instructs the optical enclosure to open or close the input window shutter.

This will tell the enclosure to change the state of the input window shutter.  The shutter can either be set to be opened or closed.

*Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> inputWindow.inputWindowShutterState = {input shutterState}
</ul>"""
    args = [

      {
        name 	    = shutterState
        description = The desired state of the input window shutter.
        enum        = [OPEN, CLOSE]
      }
    ]
 }

{
   name		    = setEngineeringMode
   description	    = """Instructs the optical enclosure to enter or exit engineering mode (engineering).

This command instructs the optical enclosure to turn on/off engineering mode.  Engineering mode allows the system to be run manually by turning off timed state transitions.

*Simple Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.engineeringMode = {input desiredMode}
</ul>"""
    args = [

      {
        name 	    = desiredMode 
        description = """The desired state of engineering mode.  This indicates if engineering mode should be turned on or off."""
        enum        = [ON, OFF]
      }

      {
        name 	    = timout 
        description = """Sets the length of time for the engineering mode to stay active (in hours).  After this timeout, the enclosure will resume managing its current environmental conditions."""
        type        = double
      }
    ]
 }


 {
   name             = shutdownPlc
   description      = """Instruct the enclosure controller to place the enclosure in a "maintain" state and shut down the PLC (engineering).

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>	
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
<li> state.standby = FALSE
<li> state.quiet = FALSE
</ul>"""
 }

 {
   name 	          = submitCommand 
   description	    = """Send a custom command to the ENCL PLC (engineering).  

This allows access to the full capabilities of the PLC should additional information be required that isn't available via direct assembly commands.  This command parameter is based on the interface between the NCC and PLC and should strictly only be used when there is an advanced understanding of the results and ramifications of making the custom call.  

"Discrete Command."

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> Completion of the command may affect all telemetery and state of the ENCL Assembly.  
</ul>"""
    args = [
      {
        name	    = command
        description = The string based command formatted to match that expected in the NCC to PLC ICD.
        type        = string

      }
    ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }


  {
    name            = debug
    description     = """Change the assembly debug message level (engineering).

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Frienly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

{
    name            = park
    description     = """Park the enclosure. 

This command will close all port gate value, close the input window, and command the enclosure to exit quite mode.  

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.refrigeration != COOLING | WARMING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.engr = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.standby = FALSE
<li> state.quiet = FALSE
<li> portGate.topPortGateState = CLOSED
<li> portGate.sidePortGateState = CLOSED
<li> portGate.bottomPortGateState = CLOSED
<li> inputWindow.inputWindowShutterState = CLOSED
</ul>"""
  }

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

