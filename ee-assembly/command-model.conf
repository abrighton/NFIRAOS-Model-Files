subsystem = NFIRAOS
component = ee	

description = EE Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. (engineering) 

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

{
    name            = shutdownServer
    description     = """Shutdown the designated server's OS, if it is currently running. (service alarm) 

This will instruct the designated server OS (NCC Server, NCC Spare Server, or HRWFS Server), via the management port, to gracefully shutdown allowing the server a chance shutdown the OS, before power is removed via the power bar. The command does not directly execute a system shutdown/reboot command, but instead it triggers a shutdown systemd script.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> if {designatedServer == NCC_SERVER}
  <ul>
  <li> then nccServerStatus.running = false
  </ul>
<li> else if {designatedServer == NCC_SPARE }
  <ul>
  <li> then nccBackupServerStatus.running = false
  </ul>
<li> else if {designatedServer == HRWFS_SERVER }
  <ul>
  <li> then hrwfsServerStatus.running = false
  </ul>
<li> else if {designatedServer == ALL }
  <ul>
  <li> then nccServerStatus.running = false
  <li> then nccBackupServerStatus.running = false
  <li> then hrwfsServerStatus.running = false
  </ul>
</ul>"""
    args = [
       {
        name        = designatedServer 
        description = The server that is to be shutdown
        enum        = [ ALL, NCC_SERVER, NCC_SPARE, HRWFS_SERVER ]
      }
    ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }


]

