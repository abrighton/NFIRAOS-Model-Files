subsystem = NFIRAOS
component = ngsSsm

description = NGS SSM Assembly commands.

receive = [

  {
    name            = init
    description     = """Prepares the assembly for operation and reads configuration files. (engineering)

This command will clear the tip/tilt/focus integrator and will also internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.
 
*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.onTarget = true | false
<li> ssTarget.x = 0
<li> ssTarget.y = 0
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }
  
  {
    name            = datum
    description     = """Datum all the NGS SSM stages and resets the tip/tilt/focus integrator. 

This command will internally trigger a stop if required.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.ss = false
<li> state.onTarget = true
</ul>"""
  }

    {
    name            = park
    description     = """Park all the NGS SSM stages by moving them to the safe maintenance/serving positions.

This command will internally trigger a stop if required and then move all stage to park position as specified in the configuration file.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.ss = false
<li> state.onTarget = true
</ul>"""
  }


  {
    name            = stop
    description     = """Cancel the current discrete or following type command and stop all NGS SSM stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
  }

  {
    name            = setDither
    description     = """Set or clear the telescope dither state, to inform the SSM the whether telescope is currently performing a dither or not. 

When the telescope is dithering the SSM assembly will change servo gains to stay locked on the guide star. This command does not stop the follow mode. If the timestamp parameter is not specified then the dither flag state change happens immediately.
 
*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.dither = true | false
</ul>"""
    args = [
      {
        name        = dither
        description = flag indicating if the telescope is currently dithering
        type        = boolean
      }
      {
        name        = time
        description = "timestamp indicating when the specified dither flag takes effect"
        type        = double
        units       = "TAI / PTP"
      }
    ]
    requiredArgs = [ dither ]
  }


  {
    name            = move
    description     = """Calibration command to move individual NGS SSM stages to the specified positions. (calibration)

At least on input parameter must be specified, all unspecified stages will remain unchanged. The specified SSM stages must be datumed otherwise this command will be rejected.

*Discrete Command.*
  
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
</ul>"""
    args = [
      {
        name        = x
        description = target NGS SSM x-axis stage position.
        type        = double
        units       = "mm in local stage coordinate system"
      }
      {
        name        = y
        description = target NGS SSM y-axis stage position.
        type        = double
        units       = "mm in local stage coordinate system"
      }
      {
        name        = tip
        description = target NGS SSM tip-axis stage position.
        type        = double
        units       = "degrees in local stage coordinate system"
      }
      {
        name        = tilt
        description = target NGS SSM tilt-axis stage position.
        type        = double
        units       = "degrees in local stage coordinate system"
      }
      {
        name        = focus
        description = target NGS SSM focus-axis stage position.
        type        = double
        units       = "mm in local stage coordinate system"
      }
    ]
  }

  {
    name            = positionPwfs
    description     = """Position the PWFS based on the pointing model. (calibration)

This command positions the SSM to the specified image position based on the pointing model. Image, pupil and focus offsets are set to zero, therefore the differential offset model is not used. All SSM stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> position.imageX = {input imageX}
<li> position.imageY = {input imageY}
<li> target.offsetImageX = 0
<li> target.offsetImageY = 0
<li> target.offsetPupilX = 0
<li> target.offsetPupilY = 0
<li> target.offsetFocus = 0
</ul>"""
    args = [
      {
        name        = imageX
        description = target NGS SSM x-axis image position.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = imageY
        description = target NGS SSM y-axis image position.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
    ]
    requiredArgs = [ imageX, imageY ]
  }

  {
    name            = nudgePwfs
    description     = """Offsets the image, pupil and focus relative to the current position. (calibration)

The specified values are added to the current offset values (offset.*) and applied to the differential offset model to generate stage position offset. All SSM stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> target.offsetImageX = target.offsetImageX + {input imageX}
<li> target.offsetImageY = target.offsetImageY + {input imageY}
<li> target.offsetPupilX = target.offsetPupilX + {input pupilX}
<li> target.offsetPupilY = target.offsetPupilY + {input pupilY}
<li> target.offsetFocus = target.offsetFocus + {input focus} 
</ul>"""
    args = [
      {
        name        = imageX
        description = Target NGS SSM x-axis image offset.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = imageY
        description = Target NGS SSM y-axis image offset.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = pupilX
        description = Target NGS SSM x-axis pupil offset.
        type        = double
        units       = "fraction of pupil diameter shift in FCRS<sub>174.5</sub>"
      }
      {
        name        = pupilY
        description = Target NGS SSM y-axis pupil offset.
        type        = double
        units       = "fraction of pupil diameter shift in FCRS<sub>174.5</sub>"
      }
      {
        name        = focus
        description = Target NGS SSM focus offset.
        type        = double
        units       = "&mu;m of RMS wavefront error in FCRS<sub>174.5</sub>"
      }
    ]
  }

  {
    name            = zeroPwfs
    description     = """Position the PWFS by nulling error measurements from the NRTC. (calibration)

This command continual updates the position of the SSM based on image, pupil and focus error measurements from the NRTC. These error measurements are integrated and add to the specified initial positions to produce image, pupil and focus target positions. The image, pupil and focus target positions are applied to the current transform model to generate stage target positions, which are sent to the HCDs. This command continues to operate in closed-loop with the NRTC until the image, pupil and focus errors are below the specified error thresholds and the stages have stopped moving, such that:
<ul>
<li>[(target.offsetImageX-current.offsetImageX)<sup>2</sup>+(target.offsetImageY-current.offsetImageY)<sup>2</sup>]<sup><sup>1</sup>/<sub>2</sub></sup> < imageErrThresh
<li>[(target.offsetPupilX-current.offsetPupilX)<sup>2</sup>+(target.offsetPupilY-current.offsetPupilY)<sup>2</sup>]<sup><sup>1</sup>/<sub>2</sub></sup> < pupilErrThresh
<li>abs(target.offsetFocus-current.offsetFocus) < focusErrThresh
</ul>
At which point the command returns with the current stage positions and the last image, pupil and focus errors values from the NRTC.

Executing this command will reset image, pupil and focus integrators. 

This command is intended to be used for calibrating the SSM transform (aka pointing model).

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
<li> state.onTarget = true
<li> target.posImageX = {input imageXPos}
<li> target.posImageY = {input imageYPos}
<li> target.offsetImageX = {input imageXOffset} 
<li> target.offsetImageY = {input imageYOffset}
<li> target.offsetPupilX = {input pupilXOffset}
<li> target.offsetPupilY = {input pupilYOffset}
<li> target.offsetFocus = {input focusOffset} 

</ul>"""
    args = [
      {
        name        = imageXPos
        description = Target NGS SSM x-axis image position.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = imageYPos
        description = Target NGS SSM y-axis image position.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = imageXOffset
        description = Target NGS SSM x-axis image offset.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = imageYOffset
        description = Target NGS SSM y-axis image offset.
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = pupilXOffset
        description = Target NGS SSM x-axis pupil offset.
        type        = double
        units       = "fraction of pupil diameter shift in FCRS<sub>174.5</sub>"
      }
      {
        name        = pupilYOffset
        description = Target NGS SSM y-axis pupil offset.
        type        = double
        units       = "fraction of pupil diameter shift in FCRS<sub>174.5</sub>"
      }
      {
        name        = focusOffset
        description = Target NGS SSM focus offset.
        type        = double
        units       = "&mu;m of RMS wavefront error in FCRS<sub>174.5</sub>"
      }
      {
        name        = imageErrThresh
        description = image offset error threshold. 
        type        = double
        units       = "mm in FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = pupilErrThresh
        description = pupil offset error threshold.
        type        = double
        units       = "fraction of pupil diameter shift in FCRS<sub>174.5</sub>"
      }
      {
        name        = focusErrThresh
        description = focus focus threshold.
        type        = double
        units       = "&mu;m of RMS wavefront error in FCRS<sub>174.5</sub>"
      }
    ]
  }

  {
    name            = setNssTarget
    description     = """Set the input PWFS position for following in SS mode. 

This position is used instead of the PWFS position stream from the TCS. This command does not actually move the SSM until the following in SS mode is enabled.
  
*Friendly Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> ssTarget.x = {input x}
<li> ssTarget.y = {input y}
</ul>"""
    args = [
      {
        name        = x
        description = target in x for SS NGS source.
        type        = double
        units       = "mm in X-axis of FCRS<sub>174.5</sub> at reference wavelength"
      }
      {
        name        = y
        description = target in y for SS NGS source.
        type        = double
        units       = "mm in Y-axis of FCRS<sub>174.5</sub> at reference wavelength"
      }
    ]
    requiredArgs = [ x, y ]
  }

  {
    name            = resetIntegrator
    description     = """Reset the image, pupil and/or focus error integrator. (calibration) 

This command does not stop the follow mode. If following this may cause the trackingError notable event to be raised, since there maybe a discontinuous jump in the target positions of the SSM stages. At least one input parameter must be specified.

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.onTarget = true | false
</ul>"""
  args = [
      {
        name        = image
        description = reset image error integrator.
        type        = boolean
      }
      {
        name        = pupil
        description = reset pupil error integrator.
        type        = boolean
      }
      {
        name        = focus
        description = reset focus error integrator.
        type        = boolean
      }
    ]
  }

  {
    name            = follow
    description     = """Enable the NGS SSM follow mode. 

When the follow mode is enabled, the NGS SSM will track the PWFS image position demands from the TCS, TTF errors from the RTC and the expected pupil shift stream from NGS ADC Assembly. 

If SS mode is enable, then the NGS SSM will not follow the PWFS image position stream from the TCS. Instead the image position will be set based on the image position set by the setNssTarget command and the ADC image shift stream from the NGS ADC Assembly. If the ss input parameter is not specified, then the SS mode will be disabled.

Executing this command will reset all integrators. 
  
*Following Command.*

Precondition:                             
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.move = true
<li> target.offsetImageX = 0
<li> target.offsetImageY = 0
<li> target.offsetPupilX = 0
<li> target.offsetPupilY = 0
<li> target.offsetFocus = 0
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.ss = {input ss}
<li> state.onTarget = true 
</ul>"""
  args = [
      {
        name        = ss
        description = enable SS mode to operate with SS NGS Assembly
        type        = boolean
      }
    ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }


  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

