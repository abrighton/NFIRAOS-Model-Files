subsystem = NFIRAOS
component = nsen

description = NSEN Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. (engineering)

This command will internally trigger a stop if required. And will trigger the init commands for all functional groups.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> BENCH_state.cmd = READY
<li> ACQ_state.cmd = READY
<li> DL_state.cmd = READY
<li> HRWFS_state.cmd = READY
<li> CAL_state.cmd = READY
</ul>"""
    args = [
       {
        name        = configuration name
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configuration version
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the NSEN assembly.

This command will internally trigger BENCH_datum and CAL_select (to de-activate light sources).

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> BENCH_state.cmd = BUSY
<li> BENCH_state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
<li> CAL_state.selection[] = false
</ul>"""
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCDs.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

  {
    name            = BENCH_datum
    description     = """Datum the NSEN optical bench stages.

This command will internally trigger a stop if required.

*Discrete Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> BENCH_state.cmd = BUSY
<li> BENCH_state.move = true
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
</ul>"""
  }

  {
    name            = BENCH_stop
    description     = """Cancel the current discrete type command and stops the NSEN optical bench stages.

*Discrete Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> BENCH_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
</ul>"""
  }

  {
    name            = BENCH_move_stage
    description     = """Command to move the NSEN optical bench stages to the specified positions in motor counts. (engineering)

The NSEN optical bench stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> BENCH_state.cmd = BUSY
<li> BENCH_state.move = true
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
</ul>"""
    args = [
      {
        name        = X
        description = target stage X position.
        type        = integer
        units       = counts
      }
      {
        name        = Y
        description = target stage Y position.
        type        = integer
        units       = counts
      }
      {
        name        = Z
        description = target stage Z position.
        type        = integer
        units       = counts
      }
    ]
  }

  {
    name            = BENCH_nudge_stage
    description     = """Command to offset the NSEN optical bench stages relative to their current locations in motor counts. (engineering)

The NSEN optical bench stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> BENCH_state.cmd = BUSY
<li> BENCH_state.move = true
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
</ul>"""
    args = [
      {
        name        = dX
        description = target stage X offset.
        type        = integer
        units       = counts
      }
      {
        name        = dY
        description = target stage Y offset.
        type        = integer
        units       = counts
      }
      {
        name        = dZ
        description = target stage Z offset.
        type        = integer
        units       = counts
      }
    ]
  }

  {
    name            = BENCH_select_sensor
    description     = """Indicate which NSEN sensor is currently in use for the purposes of calculating optical bench positions using the BENCH_move_sensor command.

This command will not actually move the optical bench. Normally one would send the BENCH_move_sensor command following BENCH_select for this purpose.

*Simple Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.select = ACQ | DL | HRWFS
</ul>"""
    args = [
      {
        name        = select
        description = which NSEN camera is used as a position reference for the optical bench
        enum        = [ ACQ, DL, HRWFS ]
      }
    ]
    requiredArgs = [ select ]
  }


  {
    name            = BENCH_move_sensor
    description     = """Move the selected NSEN sensor to the specified location in FCRS<sub>174.5</sub> coordinates.

The NSEN optical bench stages must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> BENCH_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> BENCH_state.cmd = BUSY
<li> BENCH_state.move = true
</ul>
At Completion:
<ul>
<li> BENCH_state.cmd = READY
<li> BENCH_state.move = false
</ul>"""
    args = [
      {
        name        = X
        description = target X coordinate of selected sensor.
        type        = double
        units       = mm
      }
      {
        name        = Y
        description = target Y coordinate of selected sensor.
        type        = double
        units       = mm
      }
      {
        name        = Z
        description = target Z coordinate of selected sensor.
        type        = double
        units       = mm
      }
    ]
  }


  {
    name            = ACQ_init
    description     = """Initialize the ACQ camera: (re-)load configuration files, (re-)connect to the camera. (engineering)

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> ACQ_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> ACQ_state.cmd = READY
</ul>"""
  }

  {
    name            = ACQ_config_exposure
    description     = """Configure subsequent exposures with ACQ camera.

This command can be used to configure one or multiple exposures. In the latter case, nexposures is set >1, and the period is set to the time between the start of each exposure. In this case, if the period is set to 0, it simply takes the nexposures as fast as possible. Otherwise positive values of period must be greater than the value of time. It is believed that the HASO WFS has a maximum rate of 7 Hz (TBD).

*Discrete Command.*

Precondition:
<ul>
<li> ACQ_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> ACQ_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> ACQ_state.cmd = READY
</ul>"""
    args = [
      {
        name        = time
        description = exposure time
        type        = double
        units       = ms
      }
      {
        name        = nexposures
        description = number of exposures to take
        type        = integer
      }
      {
        name        = period
        description = time between triggers if performing multiple exposures
        type        = double
        units       = ms
      }
      {
        name        = dark
        description = optional name of dark image for calibration
        type        = string
      }
      {
        name        = flatfield
        description = optional name of flatfield image for calibration
        type        = string
      }
      {
        name        = path
        description = path to write the output file
        type        = string
      }
    ]
  }

  {
    name            = ACQ_expose
    description     = """Trigger one or more exposures as specified with the previous ACQ_config_exposure command.

If the optional calibration images were specified in the preceeding ACQ_config_exposure command, the resulting image will be calibrated: [(raw image) - (dark image)]/(flat).

In the event of multiple exposures, the output file will contain both the average 2D image and a data cube including each individual exposure.

*Discrete Command.*

Precondition:
<ul>
<li> ACQ_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> ACQ_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> ACQ_state.cmd = READY
</ul>"""

  }

  {
    name            = ACQ_abort
    description     = """Abort currently executing command/exposure.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> ACQ_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> ACQ_state.cmd = READY
</ul>"""
  }


  {
    name            = DL_init
    description     = """Initialize the DL camera: (re-)load configuration files, (re-)connect to the camera.  (engineering)

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> DL_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> DL_state.cmd = READY
</ul>"""
  }

  {
    name            = DL_config_exposure
    description     = """Configure subsequent exposures with DL camera. (calibration)

This command can be used to configure one or multiple exposures. In the latter case, nexposures is set >1, and the period is set to the time between the start of each exposure. In this case, if the period is set to 0, it simply takes the nexposures as fast as possible. Otherwise positive values of exposure must be greater than the value of time.

*Discrete Command.*

Precondition:
<ul>
<li> DL_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> DL_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> DL_state.cmd = READY
</ul>"""
    args = [
      {
        name        = time
        description = exposure time
        type        = double
        units       = ms
      }
      {
        name        = nexposures
        description = number of exposures to take
        type        = integer
      }
      {
        name        = period
        description = time between triggers if performing multiple exposures
        type        = double
        units       = ms
      }
      {
        name        = dark
        description = optional name of dark image for calibration
        type        = string
      }
      {
        name        = flatfield
        description = optional name of flatfield image for calibration
        type        = string
      }
      {
        name        = path
        description = path to write the output file
        type        = string
      }
    ]
  }

  {
    name            = DL_expose
    description     = """Trigger one or more exposures as specified with the previous DL_config_exposure command. (calibration)

If the optional calibration images were specified in the preceeding DL_config_exposure command, the resulting image will be calibrated: [(raw image) - (dark image)]/(flat).

In the event of multiple exposures, the output file will contain both the average 2D image and a data cube including each individual exposure.

*Discrete Command.*

Precondition:
<ul>
<li> DL_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> DL_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> DL_state.cmd = READY
</ul>"""

  }

  {
    name            = DL_abort
    description     = """Abort currently executing command/exposure. (calibration)

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> DL_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> DL_state.cmd = READY
</ul>"""
  }


  {
    name            = HRWFS_init
    description     = """Initialize the HRWFS: (re-)load configuration files, (re-)connect to the sensor.  (engineering)

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> HRWFS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> HRWFS_state.cmd = READY
</ul>"""
  }

  {
    name            = HRWFS_config_exposure
    description     = """Configure subsequent exposures with HRWFS. (calibration)

This command can be used to configure one or multiple exposures. In the latter case, nexposures is set >1, and the period is set to the time between the start of each exposure. In this case, if the period is set to 0, it simply takes the nexposures as fast as possible. Otherwise positive values of exposure must be greater than the value of time.

If takeDark is set, only a dark exposure is being requested. It will both be stored locally on the HRWFS host computer to be used in subsequent exposures, and stored on the host computer for this assembly at the location specified in the path attribute.

*Discrete Command.*

Precondition:
<ul>
<li> HRWFS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> HRWFS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> HRWFS_state.cmd = READY
</ul>"""
    args = [
      {
        name        = time
        description = exposure time
        type        = double
        units       = ms
      }
      {
        name        = nexposures
        description = number of exposures to take
        type        = integer
      }
      {
        name        = period
        description = time between triggers if performing multiple exposures
        type        = double
        units       = ms
      }
      {
        name        = takeDark
        description = next image will be a dark calibration exposure
        type        = boolean
      }
      {
        name        = dark
        description = optional name of dark image for calibration (cannot be specified if takeDark is set)
        type        = string
      }
      {
        name        = path
        description = path to write the output file
        type        = string
      }
    ]
  }

  {
    name            = HRWFS_expose
    description     = """Trigger one or more exposures as specified with the previous HRWFS_config_exposure command. (calibration)

If the optional dark image was specified in the preceeding HRWFS_config_exposure command, the resulting image will have this dark subtracted prior to processing the wavefront measurements. Note that this dark must already been created through a previous HRWFS_expose command, with the 'takeDark' attribute set in the preceeding HRWFS_config_exposure to the name of the dark. This dark is stored locally on the HRWFS host computer (the image cannot be sent to the HWRFS HCD from this assembly).

In the event of multiple exposures, the output file will contain both the average 2D image and a data cube including each individual exposure.

*Discrete Command.*

Precondition:
<ul>
<li> HRWFS_state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> HRWFS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> HRWFS_state.cmd = READY
</ul>"""

  }

  {
    name            = HRWFS_abort
    description     = """Abort currently executing command/exposure. (calibration)

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> HRWFS_state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> HRWFS_state.cmd = READY
</ul>"""
  }


  {
    name            = CAL_select
    description     = """Select which NSEN CAL sources are active. (engineering)

This command independently activates/de-activates all of the NSEN calibration light sources. It is TBD whether the lights sources will be independently configurable, or if they will be activated/de-activated in unison.

*Simple Command.*

Precondition:
<ul>
<li> CAL_state.cmd != UNINITIALIZED
</ul>
At Completion:
<ul>
<li> CAL_state.cmd = READY
<li> CAL_state.select = [ True|False, True|False, True|False, True|False ]
</ul>"""
    args = [
      {
        name        = select
        description = which CAL sources are active
        type        = array
        dimensions: [4]
        items = {
          type      = boolean
        }
      }
    ]
    requiredArgs = [ select ]
  }

]
