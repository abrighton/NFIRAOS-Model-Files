subsystem = NFIRAOS
component = tts

description = TTS Assembly commands.

receive = [
 {
    name            = init
    description     = """Initialize the assembly and read configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*

Precondition:
<ul>
<li> none
</ul>n
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.engr = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = Name of the configuration file to get from the TMT Configuration Service
        type        = string
      }
      {
        name        = configVersion
        description = Version of the configuration file to get from the TMT Configuration Service
        type        = string 
      }
    ]
  }

  {
    name            = datum
    description     = """Datum the TTS. 

This command will put the TTS into engineering mode, zero the TTS and then take the TTS out of engineering mode on completion.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.engr = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.engr = false
</ul>"""
  }

 {
    name            = engr
    description     = """Put the TTS into or take the TTS out of engineering mode. (calibration)

While in engineering mode, the TTS Assembly can send movement commands to the position the TTS. When engineering mode is disabled TTS Assembly will reject all position and move commands, as the TTS is assumed to under the control of the NRTC.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.engr = {input engr}
</ul>"""
    args = [
      {
        name        = engr 
        description = engineering mode
        type        = boolean
      }
    ]
    requiredArgs = [ engr ]
  }

 {
    name            = move
    description     = """Engineering command to move the TTS to the specified positions in used of mechanical rotation. (calibration)

The TTS Assembly must be in engineering mode otherwise this command will be rejected.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.engr = true
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = x
        description = target rotation about x-axis of TTS.
        type        = double
        units       = milliradian of mechanical rotation

      }
      {
        name        = y
        description = target rotation about y-axis of TTS.
        type        = double
        units       = milliradian of mechanical rotation
      }
    ]
    requiredArgs = [ x, y ]
  }

  {
    name            = position
    description     = """Engineering command to position the TTS to the specified positions in the NFIRAOS coordinate system. (calibration)

The TTS Assembly must be in engineering mode otherwise this command will be rejected.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.engr = true
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
      {
        name        = tip
        description = target tip of the TTS.
        type        = double
        units       = "Arcsec on the sky in FCRS<sub>174.5</sub>"

      }
      {
        name        = tilt
        description = target tilt of the TTS.
        type        = double
        units       = "Arcsec on the sky in FCRS<sub>174.5</sub>"
      }
    ]
    requiredArgs = [ tip, tilt ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.
<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO : connections and command status
<li>	\b WARN(ing) : unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

  {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

