subsystem = NFIRAOS
component = ngsFsm

description = NGS FSM Assembly commands.

receive = [
  
  {
    name            = init
    description     = """Prepares the assembly for operation and read configuration files. (engineering)

This command will internally trigger a stop if required.

If configName and configVersion are not specified in the input, then the default configuration name and version will be used. If only configName is specified in the input, then the default version for the specified configName will be used. If only configVersion is specified in the input, then an error is returned.

*Discrete Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = false
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
    args = [
       {
        name        = configName 
        description = """Name of the configuration file to get from the TMT Configuration Service"""
        type        = string
      }
      {
        name        = configVersion
        description = """Version of the configuration file to get from the TMT Configuration Service"""
        type        = string 
      }
    ]
  }
  
  {
    name            = datum
    description     = """Datum the NGS FSM stage. 

This command will internally trigger a stop if required.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
  }

  {
    name            = stop
    description     = """Cancel the current discrete or following type command and stop the NGS FSM stages.
  
*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
  }

  {
    name            = move
    description     = """Engineering command that moves the NGS FSM stage to the specified  position in units of mechanical rotation. (engineering)
 
The NGS FSM stage must be datumed otherwise this command will be rejected and at least one input parameter must be specified, all unspecified stages will remain unchanged.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
<li> state.move = DATUMED | MOVING
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
    args = [
      {
        name        = tip
        description = """target NGS FSM tip stage position."""
        type        = double
        units       = """milliradians of mechanical rotation in local stage coordinate system"""
      }
      {
        name        = tilt
        description = """target NGS FSM tilt stage position."""
        type        = double
        units       = """milliradians of mechanical rotation in local stage coordinate system"""
      }
    ]
  }

  {
    name            = position
    description     = """Calibration command that moves the NGS FSM stage to the specified position in units of image shift. (calibration) 

The NGS FSM stage must be datumed otherwise this command will be rejected.

*Discrete Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = READY
<li> state.move = false
</ul>"""
    args = [
      {
        name        = x
        description = """target NGS FSM x position"""
        type        = double
        units       = """mm in plane of FCRS<sub>174.5</sub> at reference wavelength"""
      }
      {
        name        = y
        description = """target NGS FSM y position"""
        type        = double
        units       = """mm in plane of FCRS<sub>174.5</sub> at reference wavelength"""
      }
    ]
    requiredArgs = [ x, y ]
  }


  {
    name            = follow
    description     = """Enable the NGS FSM follow mode. 

When the follow mode is enabled, the NGS FSM will follow the modulation and dither signal based on the specified inputs. If either the specified amplitude on frequency is zero, then the corresponding signal is signal is disabled.

Either modAmplitude, or ditherAmplitude, or all input parameters must be specified. 

If modAmplitude is not specified, or set to zero, then modulation is not performed (state.modulation = false). 

Similarly if ditherAmplitude is not specified, or set to zero, then dithering is not performed (state.dither = false).
  
The period of the dither signal (i.e. PWFS exposure period * the number of PWFS frames per dither signal period) divided by waveform generator step period (40 &mu;s), defines the number of steps in motion profile table which must be an integer.  

The NGS FSM stage must be datumed otherwise this command will be rejected.

*Following Command.*

Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
<li> state.move = true
</ul>
At Completion:
<ul>
<li> state.cmd = CONTINUOUS
<li> state.move = true | false
<li> state.modulation = true | false
<li> state.dither = true | false
</ul>"""
  args = [
      {
        name        = pwfsModPeriod
        description = """Period of the PWFS exposure and the modulation signal."""
        type        = double
        units       = microseconds
        minimum     = 1250
      }
      {
        name        = pwfsFramesPerDither
        description = """The number of PWFS frames per dither signal period. This value must be a multiple of 4.""" 
        type        = integer 
        units       = """Number of PWFS frames"""
        minimum     = 4
      }
      {
        name        = ditherAmplitude 
        description = """Dither signal amplitude."""
        type        = double
        units       = """mm in plane of FCRS<sub>174.5</sub> at reference wavelength"""
        minimum     = 0
      }
      {
        name        = modAmplitude 
        description = """Modulation signal amplitude."""
        type        = double
        units       = """mm in plane of FCRS<sub>174.5</sub> at reference wavelength"""
        minimum     = 0
      }
    ]
    requiredArgs = [ pwfsModPeriod, framesPerDither ]
  }

  {
    name            = test
    description     = """Test the assembly connections.  There is no movement. (engineering)

The assembly will reconnect to its HCD.

*Simple Command.*

Precondition:
<ul>
<li> state.cmd = READY
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = READY
</ul>"""
  }

  {
    name            = debug
    description     = """Change the assembly debug message level. (engineering)

The assembly will log all messages that correspond to the current debug message level as well as all lower levels (e.g. if the current debug message level is INFO, then all INFO, WARN and ERROR messages will be logged). Below are the debug message levels in descending order.

<ul>
<li>	\b DEBUG: extra details as messages are processed   
<li>	\b INFO: connections and command status
<li>	\b WARN(ing): unexpected events/messages/etc
<li>	\b ERROR: failed to do something
</ul>

*Friendly Command.*
 
Precondition:
<ul>
<li> state.cmd != UNINITIALIZED
</ul>
Execution:
<ul>
<li> none
</ul>
At Completion:
<ul>
<li> state.debug = {input debug}
</ul>"""
    args = [
      {
        name        = debug
        description = target debug level
        enum        = [ DEBUG, INFO, WARN, ERROR ] 
      }
    ]
    requiredArgs = [ debug ]
  }

 {
    name            = shutdown
    description     = """Shutdown the assembly. (engineering)

This command is used to properly shutdown the assembly in preparation to turn off the NCC server.

*Simple Command.*
 
Precondition:
<ul>
<li> none
</ul>
Execution:
<ul>
<li> state.cmd = BUSY
</ul>
At Completion:
<ul>
<li> state.cmd = UNINITIALIZED
</ul>"""
  }

]

